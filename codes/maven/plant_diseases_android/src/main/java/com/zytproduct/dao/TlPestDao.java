package com.zytproduct.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zytproduct.dao.TlPest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TL_PEST.
*/
public class TlPestDao extends AbstractDao<TlPest, Long> {

    public static final String TABLENAME = "TL_PEST";

    /**
     * Properties of entity TlPest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PestId = new Property(0, Long.class, "pestId", true, "PEST_ID");
        public final static Property PestName = new Property(1, String.class, "pestName", false, "PEST_NAME");
        public final static Property PestUrl = new Property(2, String.class, "pestUrl", false, "PEST_URL");
    };


    public TlPestDao(DaoConfig config) {
        super(config);
    }
    
    public TlPestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TL_PEST' (" + //
                "'PEST_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pestId
                "'PEST_NAME' TEXT NOT NULL ," + // 1: pestName
                "'PEST_URL' TEXT);"); // 2: pestUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TL_PEST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TlPest entity) {
        stmt.clearBindings();
 
        Long pestId = entity.getPestId();
        if (pestId != null) {
            stmt.bindLong(1, pestId);
        }
        stmt.bindString(2, entity.getPestName());
 
        String pestUrl = entity.getPestUrl();
        if (pestUrl != null) {
            stmt.bindString(3, pestUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TlPest readEntity(Cursor cursor, int offset) {
        TlPest entity = new TlPest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pestId
            cursor.getString(offset + 1), // pestName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // pestUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TlPest entity, int offset) {
        entity.setPestId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPestName(cursor.getString(offset + 1));
        entity.setPestUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TlPest entity, long rowId) {
        entity.setPestId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TlPest entity) {
        if(entity != null) {
            return entity.getPestId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
