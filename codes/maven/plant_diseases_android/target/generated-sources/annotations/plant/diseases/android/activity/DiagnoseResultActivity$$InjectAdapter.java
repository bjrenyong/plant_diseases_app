// Code generated by dagger-compiler.  Do not edit.
package plant.diseases.android.activity;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<DiagnoseResultActivity>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code DiagnoseResultActivity} and its
 * dependencies.
 *
 * Being a {@code Provider<DiagnoseResultActivity>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<DiagnoseResultActivity>} and handling injection
 * of annotated fields.
 */
public final class DiagnoseResultActivity$$InjectAdapter extends Binding<DiagnoseResultActivity>
    implements Provider<DiagnoseResultActivity>, MembersInjector<DiagnoseResultActivity> {
  private Binding<com.zyt.android.dbbase.AbsDaoFactory> daoFactory;
  private Binding<BaseActivity> supertype;

  public DiagnoseResultActivity$$InjectAdapter() {
    super("plant.diseases.android.activity.DiagnoseResultActivity", "members/plant.diseases.android.activity.DiagnoseResultActivity", NOT_SINGLETON, DiagnoseResultActivity.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    daoFactory = (Binding<com.zyt.android.dbbase.AbsDaoFactory>) linker.requestBinding("com.zyt.android.dbbase.AbsDaoFactory", DiagnoseResultActivity.class, getClass().getClassLoader());
    supertype = (Binding<BaseActivity>) linker.requestBinding("members/plant.diseases.android.activity.BaseActivity", DiagnoseResultActivity.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(daoFactory);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<DiagnoseResultActivity>}.
   */
  @Override
  public DiagnoseResultActivity get() {
    DiagnoseResultActivity result = new DiagnoseResultActivity();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<DiagnoseResultActivity>}.
   */
  @Override
  public void injectMembers(DiagnoseResultActivity object) {
    object.daoFactory = daoFactory.get();
    supertype.injectMembers(object);
  }

}
