// Code generated by dagger-compiler.  Do not edit.
package plant.diseases.android.activity;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<PhotoUploadActivity>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code PhotoUploadActivity} and its
 * dependencies.
 *
 * Being a {@code Provider<PhotoUploadActivity>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<PhotoUploadActivity>} and handling injection
 * of annotated fields.
 */
public final class PhotoUploadActivity$$InjectAdapter extends Binding<PhotoUploadActivity>
    implements Provider<PhotoUploadActivity>, MembersInjector<PhotoUploadActivity> {
  private Binding<com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>> webController;
  private Binding<BaseActivity> supertype;

  public PhotoUploadActivity$$InjectAdapter() {
    super("plant.diseases.android.activity.PhotoUploadActivity", "members/plant.diseases.android.activity.PhotoUploadActivity", NOT_SINGLETON, PhotoUploadActivity.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    webController = (Binding<com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>) linker.requestBinding("com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>", PhotoUploadActivity.class, getClass().getClassLoader());
    supertype = (Binding<BaseActivity>) linker.requestBinding("members/plant.diseases.android.activity.BaseActivity", PhotoUploadActivity.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(webController);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<PhotoUploadActivity>}.
   */
  @Override
  public PhotoUploadActivity get() {
    PhotoUploadActivity result = new PhotoUploadActivity();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<PhotoUploadActivity>}.
   */
  @Override
  public void injectMembers(PhotoUploadActivity object) {
    object.webController = webController.get();
    supertype.injectMembers(object);
  }

}
