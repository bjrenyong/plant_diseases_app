// Code generated by dagger-compiler.  Do not edit.
package plant.diseases.android.application;

import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ApplicationModule$$ModuleAdapter extends ModuleAdapter<ApplicationModule> {
  private static final String[] INJECTS = { "members/plant.diseases.android.activity.DiagnoseActivity", "members/plant.diseases.android.activity.DiagnoseResultActivity", "members/plant.diseases.android.activity.DiseaseListActivity", "members/plant.diseases.android.activity.PestListActivity", "members/plant.diseases.android.activity.PhotoUploadActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public ApplicationModule$$ModuleAdapter() {
    super(plant.diseases.android.application.ApplicationModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map, ApplicationModule module) {
    map.put("com.zyt.android.dbbase.AbsDaoFactory", new ProvideDaoFactoryProvidesAdapter(module));
    map.put("com.zyt.communicate.common.json.gson.IGsonCreator", new ProvideGsonCreatorProvidesAdapter(module));
    map.put("com.zyt.communicate.client.AbsClientConfig<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>", new ProvideClientConfigProvidesAdapter(module));
    map.put("com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>", new ProvideWebControllerProvidesAdapter(module));
    map.put("com.zyt.communicate.client.IRespBodyValueSetter<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>", new ProvideRespBodyValueSetterProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.zyt.android.dbbase.AbsDaoFactory>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.zyt.android.dbbase.AbsDaoFactory>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideDaoFactoryProvidesAdapter extends Binding<com.zyt.android.dbbase.AbsDaoFactory>
      implements Provider<com.zyt.android.dbbase.AbsDaoFactory> {
    private final ApplicationModule module;

    public ProvideDaoFactoryProvidesAdapter(ApplicationModule module) {
      super("com.zyt.android.dbbase.AbsDaoFactory", null, IS_SINGLETON, "plant.diseases.android.application.ApplicationModule.provideDaoFactory()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.zyt.android.dbbase.AbsDaoFactory>}.
     */
    @Override
    public com.zyt.android.dbbase.AbsDaoFactory get() {
      return module.provideDaoFactory();
    }
  }

  /**
   * A {@code Binding<com.zyt.communicate.common.json.gson.IGsonCreator>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.zyt.communicate.common.json.gson.IGsonCreator>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideGsonCreatorProvidesAdapter extends Binding<com.zyt.communicate.common.json.gson.IGsonCreator>
      implements Provider<com.zyt.communicate.common.json.gson.IGsonCreator> {
    private final ApplicationModule module;

    public ProvideGsonCreatorProvidesAdapter(ApplicationModule module) {
      super("com.zyt.communicate.common.json.gson.IGsonCreator", null, IS_SINGLETON, "plant.diseases.android.application.ApplicationModule.provideGsonCreator()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.zyt.communicate.common.json.gson.IGsonCreator>}.
     */
    @Override
    public com.zyt.communicate.common.json.gson.IGsonCreator get() {
      return module.provideGsonCreator();
    }
  }

  /**
   * A {@code Binding<com.zyt.communicate.client.AbsClientConfig<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.zyt.communicate.client.AbsClientConfig<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideClientConfigProvidesAdapter extends Binding<com.zyt.communicate.client.AbsClientConfig<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>
      implements Provider<com.zyt.communicate.client.AbsClientConfig<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>> {
    private final ApplicationModule module;

    public ProvideClientConfigProvidesAdapter(ApplicationModule module) {
      super("com.zyt.communicate.client.AbsClientConfig<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>", null, IS_SINGLETON, "plant.diseases.android.application.ApplicationModule.provideClientConfig()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.zyt.communicate.client.AbsClientConfig<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>}.
     */
    @Override
    public com.zyt.communicate.client.AbsClientConfig<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody> get() {
      return module.provideClientConfig();
    }
  }

  /**
   * A {@code Binding<com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>} and its
   * dependencies.
   *
   * Being a {@code Provider<com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideWebControllerProvidesAdapter extends Binding<com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>
      implements Provider<com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>> {
    private final ApplicationModule module;
    private Binding<com.zyt.communicate.client.json.GsonJsonWebController> webContoller;

    public ProvideWebControllerProvidesAdapter(ApplicationModule module) {
      super("com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>", null, IS_SINGLETON, "plant.diseases.android.application.ApplicationModule.provideWebController()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      webContoller = (Binding<com.zyt.communicate.client.json.GsonJsonWebController>) linker.requestBinding("com.zyt.communicate.client.json.GsonJsonWebController", ApplicationModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(webContoller);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>}.
     */
    @Override
    public com.zyt.communicate.client.AbsWebController<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody> get() {
      return module.provideWebController(webContoller.get());
    }
  }

  /**
   * A {@code Binding<com.zyt.communicate.client.IRespBodyValueSetter<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.zyt.communicate.client.IRespBodyValueSetter<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>} and its
   * dependencies.
   *
   * Being a {@code Provider<com.zyt.communicate.client.IRespBodyValueSetter<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRespBodyValueSetterProvidesAdapter extends Binding<com.zyt.communicate.client.IRespBodyValueSetter<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>
      implements Provider<com.zyt.communicate.client.IRespBodyValueSetter<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>> {
    private final ApplicationModule module;
    private Binding<com.zyt.communicate.client.json.JsonRespXmlRespBodyValueSetter> valueSetter;

    public ProvideRespBodyValueSetterProvidesAdapter(ApplicationModule module) {
      super("com.zyt.communicate.client.IRespBodyValueSetter<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>", null, IS_SINGLETON, "plant.diseases.android.application.ApplicationModule.provideRespBodyValueSetter()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      valueSetter = (Binding<com.zyt.communicate.client.json.JsonRespXmlRespBodyValueSetter>) linker.requestBinding("com.zyt.communicate.client.json.JsonRespXmlRespBodyValueSetter", ApplicationModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(valueSetter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.zyt.communicate.client.IRespBodyValueSetter<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody>>}.
     */
    @Override
    public com.zyt.communicate.client.IRespBodyValueSetter<com.zyt.communicate.common.json.IReqBody, com.zyt.communicate.common.json.IRespBody> get() {
      return module.provideRespBodyValueSetter(valueSetter.get());
    }
  }
}
